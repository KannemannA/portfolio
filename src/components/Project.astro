---
import ButtonProject from '@/components/ButtonProject.astro';
import DynamicIcon from "@/components/DynamicIcon.astro"
import { undefined } from 'astro:schema';

interface Props {
    id: number,
    title: string,
    description: string,
    image: Array<string>,
    imageDescription: Array<string>,
    href: Array<string | undefined>,
    target?: string,
    brightness?: string,
    stack: Array<string>,
    icons: Array<string>,
    nameServer?: string
}
const {id, title, description, image, imageDescription, brightness, href, target, stack, icons, nameServer} = Astro.props;
const tecnologias= ["front", "back", "host"]
---
<!-- overflow-clip -->
<li class="card will-change-transform overflow-auto sticky origin-[top center] mx-10 mb-10 bg-slate-200 rounded-[14px] h-[70vh] flex flex-col sm:flex-row justify-between p-6 gap-6" 
style={{'--index': id, 
"--target-brightness": brightness || "50%"}}>
        <aside class="flex flex-col grow prose">
            <h2 class="font-semibold text-[#16263a] text-center">{title}</h2>
            <p class="text-[#16263a] text-xs" set:html={description}></p>
            <div class="flex gap-4 justify-center mb-6">
                <ButtonProject href={href[0]} className='mr-2' target={target}>Ir al sitio</ButtonProject>
                <ButtonProject href={href[1]}>Código fuente</ButtonProject>
            </div>
            <div class="flex gap-4 mb-3">
                <h6 class="text-sm">Tecnologías:</h6>
                {stack.includes("front") && <span class="rounded-xl border bg-red-200 border-red-500 text-xs text-red-900 px-1 mt-1">Front-End</span>}
                {stack.includes("back") && <span class="rounded-xl bg-green-200 border border-green-500 text-xs text-green-900 px-1 mt-1">Back-End</span>}
                {stack.includes("host") && <span class="rounded-xl bg-blue-200 border border-blue-500 text-xs text-blue-900 px-1 mt-1">Hosting</span>}
            </div>
            <div class="flex gap-3">
                {icons.map((icon) => {
                    if (icon === "astro") return <DynamicIcon iconName="astro" color='bg-red-200' size='30' />;
                    if (icon === "react") return <DynamicIcon iconName="react" color='bg-red-200' size='30' />;
                    if (icon === "tailwind") return <DynamicIcon iconName="tailwind" color='bg-red-200' size='30' />;
                    if (icon === "java") return <DynamicIcon iconName="java" color='bg-green-200' size='30' />;
                    if (icon === "spring") return <DynamicIcon iconName="spring" color='bg-green-200' size='30' />;
                    if (icon === "githubPages") return <DynamicIcon iconName="githubPages" color='bg-blue-200' size='30' />;
                    if (icon === "host") return <DynamicIcon iconName='host' color='bg-blue-200'size='30' nameServer={nameServer}/>;
                    return null;
                })}
                
            </div>
        </aside>
        <aside class="w-full h-[50vh] sm:w-2/5 flex-shrink-0 flex flex-col gap-4">
            <figure class="m-0  h-[70%] rounded-[1em] overflow-hidden" style={{"box-shadow": "0 0.2em 1em rgba(0, 0, 0, 0.1)"}}>
                <img src={image[0]} alt={imageDescription[0]} class="size-full object-cover" id={`mainImage - ${id}`}
                >
            </figure>
            <div class="grid grid-cols-4 gap-2 h-[100px] sm:h-[30%]">
                {image.map((img, index) => (
                    <button 
                        class={`thumbnail ${index === 0 ? 'active' : ''}`}
                        onclick={`updateMainImage(${id}, this)`}
                        aria-label={`Ver imagen ${index + 1}`}
                    >
                        <img 
                            src={img} 
                            alt={imageDescription[index]} 
                            class="thumbnail__img"
                        />
                    </button>
                ))}
            </div>
        </aside>
</li>

<style>
.card {
--top: calc((var(--index) * 30px) + 4rem);
top: var(--top);
animation: stacking linear forwards;
animation-timeline: --cardsContainer;
animation-range-start: exit-crossing calc(var(--card-height) * (var(--index) - 1));
animation-range-end: exit-crossing calc((var(--card-height) * var(--index)) - var(--top));
}

@keyframes stacking {
    to {
        transform: scale(calc(1 - 0.1 * (var(--total-cards) - var(--index))));
        filter: brightness(var(--target-brightness));
    }
}

    .thumbnail {
        border: none;
        padding: 0;
        background: none;
        cursor: pointer;
        position: relative;
        border-radius: 0.5em;
        overflow: hidden;
        transition: transform 0.2s ease;
    }

    .thumbnail::after {
        content: '';
        position: absolute;
        inset: 0;
        border: 2px solid transparent;
        border-radius: inherit;
        transition: border-color 0.2s ease;
    }

    .thumbnail.active::after {
        border-color: #009e25;
    }

    .thumbnail:hover {
        transform: scale(1.05);
    }

    .thumbnail__img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
</style>

<script is:inline>
    function updateMainImage(id, element) {
        const mainImage = document.getElementById(`mainImage - ${id}`);
        const thumbnails = element.parentElement.children;

        mainImage.src = element.querySelector('img').src;
        
        Array.from(thumbnails).forEach(thumb => {
            thumb.classList.remove('active');
        });
        
        element.classList.add('active');
    }
</script>