<div class="progress-container">
  <div class="progress-bar"></div>
  <span class="progress-text">0%</span>
</div>

<script>
  (() => {
    const progressContainer = document.querySelector(".progress-container")
    const progressBar = document.querySelector(".progress-bar")
    const progressText = document.querySelector(".progress-text")

    const resourceMap = new Map();
    let totalResources = 0;
    let loadedResources = 0;
    let totalBytes = 0;
    let loadedBytes = 0;

    const getResourceSize = (entry: any) => {
        return entry.transferSize || entry.decodedBodySize || 0;
    };

    const processResource = (entry: any) => {
        if (!isValidResource(entry) || resourceMap.has(entry.name)) return;

        const resourceSize = getResourceSize(entry);
        const isSizeKnown = resourceSize > 0;
        
        resourceMap.set(entry.name, {
            loaded: false,
            size: resourceSize,
            sizeKnown: isSizeKnown
        });

        totalResources += isSizeKnown ? 0 : 1;
        totalBytes += resourceSize;

        if (entry.duration > 0 && entry.responseStatus !== 404) {
            resourceMap.get(entry.name).loaded = true;
            loadedResources += isSizeKnown ? 0 : 1;
            loadedBytes += resourceSize;
        }

        updateProgress();
    };

    const trackElement = (el: any) => {
        const src = el.src || el.href;
        if (!src || resourceMap.has(src)) return;

        resourceMap.set(src, {
            loaded: false,
            size: 0,
            sizeKnown: false
        });
        totalResources++;
        
        const onLoad = () => {
            const resource = resourceMap.get(src);
            resource.loaded = true;
            loadedResources++;
            updateProgress();
            el.removeEventListener('load', onLoad);
        };

        el.addEventListener('load', onLoad);
    };

    const updateProgress = () => {
        const resourceProgress = totalResources > 0 ? 
            (loadedResources / totalResources) * 50 : 0;
        
        const byteProgress = totalBytes > 0 ? 
            (loadedBytes / totalBytes) * 50 : 0;

        const totalProgress = Math.min(resourceProgress + byteProgress, 100);
        
        if(progressBar instanceof HTMLElement && progressText){
          progressBar.style.width = `${totalProgress}%`;
        progressText.textContent = `${Math.round(totalProgress)}%`;
        }
    };

    const resourceObserver = new PerformanceObserver(list => {
        list.getEntriesByType('resource').forEach(processResource);
    });

    const mutationObserver = new MutationObserver(mutations => {
        mutations.forEach(mutation => {
            mutation.addedNodes.forEach(node => {
                if (node.nodeType === 1) {
                    if (['IMG', 'SCRIPT', 'LINK'].includes(node.tagName)) trackElement(node);
                    node.querySelectorAll?.('img, script[src], link[rel="stylesheet"]').forEach(trackElement);
                }
            });
        });
    });

    resourceObserver.observe({ type: 'resource', buffered: true });
    mutationObserver.observe(document.documentElement, {
        childList: true,
        subtree: true
    });

    performance.getEntriesByType('resource').forEach(processResource);

    document.querySelectorAll('img, script[src], link[rel="stylesheet"]').forEach(trackElement);
    updateProgress();

    window.addEventListener('load', () => {
      setTimeout(() => {
            resourceMap.forEach(resource => {
                if (!resource.loaded) {
                    loadedResources += resource.sizeKnown ? 0 : 1;
                    loadedBytes += resource.size;
                    resource.loaded = true;
                }
            });
            updateProgress();
        }, 1500);
        setTimeout(() => {
            if (progressContainer) {
              progressContainer.id = "end-load"
            }else {
              console.error("fallo progressContainer")
            }
        }, 1800);
        setTimeout(() => {
            document.body.style.overflow = 'auto';
        }, 2800);
    });

    // Helpers
    function isValidResource(entry) {
        return !entry.name.startsWith('data:') &&
            !entry.name.includes('chrome-extension') &&
            !entry.name.includes('astro-dev-toolbar');
    }
})();
</script>


<style>
  #end-load {
    animation: loadAnimation 1s ease-in-out forwards;
  }

  @keyframes loadAnimation {
    99% {
      transform: translateY(-100vh);
    }
    100% {
      display: none;
    }
  }

  body {
    overflow: hidden;
  }

  .progress-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: #dddddd;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    z-index: 9999;
  }

  .progress-bar {
    width: 0%;
    height: 4px;
    background: #02286e;
    transition: width 0.3s ease-out;
    border-radius: 2px;
  }

  .progress-text {
    margin-top: 10px;
    font-size: 14px;
    color: #333;
  }
</style>
